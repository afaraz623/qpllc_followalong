
cmsis_f303_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  0800061c  0800061c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000620  08000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stack        00000400  20000000  20000000  00030000  2**0
                  ALLOC
  5 .data         00000004  20000400  08000624  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  20000404  08000628  00020404  2**2
                  ALLOC
  7 .heap         00000010  20000574  08000798  00020404  2**0
                  ALLOC
  8 .ccmram       00000000  10000000  10000000  00020404  2**0
                  CONTENTS
  9 .ARM.attributes 0000002a  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 10 .comment      00000050  00000000  00000000  0002042e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000016d5  00000000  00000000  0002047e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00000811  00000000  00000000  00021b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000004c3  00000000  00000000  00022364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00022827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  0002294f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001501c  00000000  00000000  00022a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b26  00000000  00000000  00037a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072f3b  00000000  00000000  00039569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000228  00000000  00000000  000ac4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000404 	.word	0x20000404
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000188 	.word	0x08000188

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000408 	.word	0x20000408
 80001c4:	08000188 	.word	0x08000188

080001c8 <assert_failed>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80001cc:	4905      	ldr	r1, [pc, #20]	; (80001e4 <assert_failed+0x1c>)
 80001ce:	68ca      	ldr	r2, [r1, #12]
 80001d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <assert_failed+0x20>)
 80001d6:	4313      	orrs	r3, r2
 80001d8:	60cb      	str	r3, [r1, #12]
 80001da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80001de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80001e0:	e7fd      	b.n	80001de <assert_failed+0x16>
 80001e2:	bf00      	nop
 80001e4:	e000ed00 	.word	0xe000ed00
 80001e8:	05fa0004 	.word	0x05fa0004

080001ec <BS_init>:

/* initial peripheral setup */
void BS_init(void)
{
    // gpioe on and set pins to gp output
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <BS_init+0x4c>)
 80001ee:	6953      	ldr	r3, [r2, #20]
 80001f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001f4:	6153      	str	r3, [r2, #20]

	GPIOE->MODER |= GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;
 80001f6:	4a11      	ldr	r2, [pc, #68]	; (800023c <BS_init+0x50>)
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80001fe:	6013      	str	r3, [r2, #0]
	
    SysTick_Config(SystemCoreClock / TICKS_PER_MS); 
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <BS_init+0x54>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <BS_init+0x58>)
 8000206:	fba2 2303 	umull	r2, r3, r2, r3
 800020a:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800020c:	3b01      	subs	r3, #1
 800020e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000212:	d20a      	bcs.n	800022a <BS_init+0x3e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000214:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000218:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <BS_init+0x5c>)
 800021c:	21f0      	movs	r1, #240	; 0xf0
 800021e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000222:	2300      	movs	r3, #0
 8000224:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000226:	2307      	movs	r3, #7
 8000228:	6113      	str	r3, [r2, #16]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022a:	4b07      	ldr	r3, [pc, #28]	; (8000248 <BS_init+0x5c>)
 800022c:	2200      	movs	r2, #0
 800022e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  __ASM volatile ("cpsie i" : : : "memory");
 8000232:	b662      	cpsie	i

    NVIC_SetPriority(SysTick_IRQn, 0U); // set systick priority to the lowest
	__enable_irq();
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000
 800023c:	48001000 	.word	0x48001000
 8000240:	20000400 	.word	0x20000400
 8000244:	10624dd3 	.word	0x10624dd3
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <BS_gpioToggle>:

void BS_gpioToggle(GPIO_TypeDef *gpiox, uint32_t gpio_pin)
{
    uint32_t odr;
    odr = gpiox->ODR;
 800024c:	6943      	ldr	r3, [r0, #20]
    gpiox->BSRR = ((odr & gpio_pin) << BS_TO_BR_OFFSET) | (~odr & gpio_pin);
 800024e:	ea03 0201 	and.w	r2, r3, r1
 8000252:	ea21 0103 	bic.w	r1, r1, r3
 8000256:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800025a:	6181      	str	r1, [r0, #24]
}
 800025c:	4770      	bx	lr
	...

08000260 <SysTick_Handler>:

void SysTick_Handler()
{
 8000260:	b508      	push	{r3, lr}
    ++l_tickctr;
 8000262:	4a04      	ldr	r2, [pc, #16]	; (8000274 <SysTick_Handler+0x14>)
 8000264:	6813      	ldr	r3, [r2, #0]
 8000266:	3301      	adds	r3, #1
 8000268:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800026a:	b672      	cpsid	i

    __disable_irq();
    osSched(); // crtical section
 800026c:	f000 f92c 	bl	80004c8 <osSched>
  __ASM volatile ("cpsie i" : : : "memory");
 8000270:	b662      	cpsie	i
    __enable_irq();
}
 8000272:	bd08      	pop	{r3, pc}
 8000274:	20000420 	.word	0x20000420

08000278 <tickCtr_internal>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000278:	b672      	cpsid	i
uint32_t tickCtr_internal(void)
{
    uint32_t tickctr;

    __disable_irq();
    tickctr = l_tickctr; // crtical section
 800027a:	4b02      	ldr	r3, [pc, #8]	; (8000284 <tickCtr_internal+0xc>)
 800027c:	6818      	ldr	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800027e:	b662      	cpsie	i
    __enable_irq();

    return tickctr;
}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000420 	.word	0x20000420

08000288 <BS_delay>:

void BS_delay(uint32_t ms)
{
 8000288:	b538      	push	{r3, r4, r5, lr}
 800028a:	4605      	mov	r5, r0
    uint32_t start = tickCtr_internal();
 800028c:	f7ff fff4 	bl	8000278 <tickCtr_internal>
 8000290:	4604      	mov	r4, r0
    while ((tickCtr_internal() - start) < ms){}
 8000292:	f7ff fff1 	bl	8000278 <tickCtr_internal>
 8000296:	1b00      	subs	r0, r0, r4
 8000298:	42a8      	cmp	r0, r5
 800029a:	d3fa      	bcc.n	8000292 <BS_delay+0xa>
}
 800029c:	bd38      	pop	{r3, r4, r5, pc}
	...

080002a0 <main_blinky1>:
#include <board_support.h>

uint32_t stack_blinky1[40];
OSThread blinky1;
int main_blinky1()
{
 80002a0:	b508      	push	{r3, lr}
	while(1)
	{
		BS_gpioToggle(GPIOE, LED_BLUE);
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	4804      	ldr	r0, [pc, #16]	; (80002b8 <main_blinky1+0x18>)
 80002a8:	f7ff ffd0 	bl	800024c <BS_gpioToggle>
		BS_delay(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b0:	f7ff ffea 	bl	8000288 <BS_delay>
	while(1)
 80002b4:	e7f5      	b.n	80002a2 <main_blinky1+0x2>
 80002b6:	bf00      	nop
 80002b8:	48001000 	.word	0x48001000

080002bc <main_blinky2>:
}

uint32_t stack_blinky2[40];
OSThread blinky2;
int main_blinky2()
{
 80002bc:	b508      	push	{r3, lr}
	while(1)
	{
		BS_gpioToggle(GPIOE, LED_RED);
 80002be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c2:	4804      	ldr	r0, [pc, #16]	; (80002d4 <main_blinky2+0x18>)
 80002c4:	f7ff ffc2 	bl	800024c <BS_gpioToggle>
		BS_delay(1000);
 80002c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002cc:	f7ff ffdc 	bl	8000288 <BS_delay>
	while(1)
 80002d0:	e7f5      	b.n	80002be <main_blinky2+0x2>
 80002d2:	bf00      	nop
 80002d4:	48001000 	.word	0x48001000

080002d8 <main>:
	}
}

int main()
{
 80002d8:	b508      	push	{r3, lr}
	BS_init();
 80002da:	f7ff ff87 	bl	80001ec <BS_init>
	osInit();
 80002de:	f000 f8e9 	bl	80004b4 <osInit>

	osThreadStart(&blinky1, main_blinky1, stack_blinky1, sizeof(stack_blinky1));
 80002e2:	23a0      	movs	r3, #160	; 0xa0
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <main+0x24>)
 80002e6:	4906      	ldr	r1, [pc, #24]	; (8000300 <main+0x28>)
 80002e8:	4806      	ldr	r0, [pc, #24]	; (8000304 <main+0x2c>)
 80002ea:	f000 f8ff 	bl	80004ec <osThreadStart>
	osThreadStart(&blinky2, main_blinky2, stack_blinky2, sizeof(stack_blinky2));
 80002ee:	23a0      	movs	r3, #160	; 0xa0
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <main+0x30>)
 80002f2:	4906      	ldr	r1, [pc, #24]	; (800030c <main+0x34>)
 80002f4:	4806      	ldr	r0, [pc, #24]	; (8000310 <main+0x38>)
 80002f6:	f000 f8f9 	bl	80004ec <osThreadStart>
	while(1)
 80002fa:	e7fe      	b.n	80002fa <main+0x22>
 80002fc:	2000042c 	.word	0x2000042c
 8000300:	080002a1 	.word	0x080002a1
 8000304:	20000424 	.word	0x20000424
 8000308:	200004cc 	.word	0x200004cc
 800030c:	080002bd 	.word	0x080002bd
 8000310:	20000428 	.word	0x20000428

08000314 <SystemInit>:
const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};



void SystemInit(void)
{
 8000314:	b082      	sub	sp, #8
  /* FPU settings --------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	9300      	str	r3, [sp, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 800031c:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <SystemInit+0xb0>)
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000324:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <SystemInit+0xb0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032e:	9300      	str	r3, [sp, #0]
    StartUpCounter++;
 8000330:	9b01      	ldr	r3, [sp, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter !=  0x0500));
 8000336:	9b00      	ldr	r3, [sp, #0]
 8000338:	b91b      	cbnz	r3, 8000342 <SystemInit+0x2e>
 800033a:	9b01      	ldr	r3, [sp, #4]
 800033c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000340:	d1f1      	bne.n	8000326 <SystemInit+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000342:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <SystemInit+0xb0>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800034a:	d00a      	beq.n	8000362 <SystemInit+0x4e>
  {
    HSEStatus = (uint32_t)0x01;
 800034c:	2301      	movs	r3, #1
 800034e:	9300      	str	r3, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 8000350:	9b00      	ldr	r3, [sp, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d008      	beq.n	8000368 <SystemInit+0x54>
  }

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <SystemInit+0xb4>)
 8000358:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800035c:	609a      	str	r2, [r3, #8]
#endif
}
 800035e:	b002      	add	sp, #8
 8000360:	4770      	bx	lr
    HSEStatus = (uint32_t)0x00;
 8000362:	2300      	movs	r3, #0
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	e7f3      	b.n	8000350 <SystemInit+0x3c>
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <SystemInit+0xb8>)
 800036a:	2212      	movs	r2, #18
 800036c:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800036e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000376:	685a      	ldr	r2, [r3, #4]
 8000378:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV2;
 800037a:	685a      	ldr	r2, [r3, #4]
 800037c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000380:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMUL));
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000388:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE_PREDIV | RCC_CFGR_PLLMUL9);
 800038a:	685a      	ldr	r2, [r3, #4]
 800038c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000390:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000398:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0){}
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <SystemInit+0xb0>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80003a2:	d0fa      	beq.n	800039a <SystemInit+0x86>
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <SystemInit+0xb0>)
 80003a6:	685a      	ldr	r2, [r3, #4]
 80003a8:	f022 0203 	bic.w	r2, r2, #3
 80003ac:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	f042 0202 	orr.w	r2, r2, #2
 80003b4:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL){}
 80003b6:	4b03      	ldr	r3, [pc, #12]	; (80003c4 <SystemInit+0xb0>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f003 030c 	and.w	r3, r3, #12
 80003be:	2b08      	cmp	r3, #8
 80003c0:	d1f9      	bne.n	80003b6 <SystemInit+0xa2>
 80003c2:	e7c8      	b.n	8000356 <SystemInit+0x42>
 80003c4:	40021000 	.word	0x40021000
 80003c8:	e000ed00 	.word	0xe000ed00
 80003cc:	40022000 	.word	0x40022000

080003d0 <NMI_Handler>:

/* fault exception handlers ------------------------------------------------*/
__attribute__((naked)) void NMI_Handler(void);
void NMI_Handler(void)
{
	__asm volatile
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <str_nmi+0x6>)
 80003d2:	f04f 0101 	mov.w	r1, #1
 80003d6:	f7ff bef7 	b.w	80001c8 <assert_failed>

080003da <str_nmi>:
 80003da:	4d4e      	.short	0x4d4e
 80003dc:	0049      	.short	0x0049
 80003de:	bf00      	nop
	"mov r1,#1\n\t"
	"b assert_failed\n\t"
	"str_nmi: .asciz \"NMI\"\n\t"
	".align 2\n\t"
    );
}
 80003e0:	080003da 	.word	0x080003da

080003e4 <MemManage_Handler>:

__attribute__((naked)) void MemManage_Handler(void);
void MemManage_Handler(void)
{
    __asm volatile
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <str_mem+0xa>)
 80003e6:	f04f 0101 	mov.w	r1, #1
 80003ea:	f7ff beed 	b.w	80001c8 <assert_failed>

080003ee <str_mem>:
 80003ee:	654d      	.short	0x654d
 80003f0:	6e614d6d 	.word	0x6e614d6d
 80003f4:	00656761 	.word	0x00656761
    "mov r1,#1\n\t"
    "b assert_failed\n\t"
    "str_mem: .asciz \"MemManage\"\n\t"
    ".align 2\n\t"
    );
}
 80003f8:	080003ee 	.word	0x080003ee

080003fc <HardFault_Handler>:

__attribute__((naked)) void HardFault_Handler(void);
void HardFault_Handler(void)
{
	__asm volatile
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <str_hrd+0xa>)
 80003fe:	f04f 0101 	mov.w	r1, #1
 8000402:	f7ff bee1 	b.w	80001c8 <assert_failed>

08000406 <str_hrd>:
 8000406:	6148      	.short	0x6148
 8000408:	61466472 	.word	0x61466472
 800040c:	00746c75 	.word	0x00746c75
	"	mov r1,#1\n\t"
	"	b assert_failed\n\t"
	"str_hrd: .asciz \"HardFault\"\n\t"
	"  .align 2\n\t"
    );
}
 8000410:	08000406 	.word	0x08000406

08000414 <BusFault_Handler>:

__attribute__((naked)) void BusFault_Handler(void);
void BusFault_Handler(void)
{
	__asm volatile
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <str_bus+0xa>)
 8000416:	f04f 0101 	mov.w	r1, #1
 800041a:	f7ff bed5 	b.w	80001c8 <assert_failed>

0800041e <str_bus>:
 800041e:	7542      	.short	0x7542
 8000420:	75614673 	.word	0x75614673
 8000424:	746c      	.short	0x746c
 8000426:	00          	.byte	0x00
 8000427:	00          	.byte	0x00
	"mov r1,#1\n\t"
	"b assert_failed\n\t"
	"str_bus: .asciz \"BusFault\"\n\t"
	".align 2\n\t"
    );
}
 8000428:	0800041e 	.word	0x0800041e

0800042c <UsageFault_Handler>:

__attribute__((naked)) void UsageFault_Handler(void);
void UsageFault_Handler(void)
{
	__asm volatile
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <str_usage+0xe>)
 800042e:	f04f 0101 	mov.w	r1, #1
 8000432:	f7ff bec9 	b.w	80001c8 <assert_failed>

08000436 <str_usage>:
 8000436:	7355      	.short	0x7355
 8000438:	46656761 	.word	0x46656761
 800043c:	746c7561 	.word	0x746c7561
 8000440:	00          	.byte	0x00
 8000441:	00          	.byte	0x00
 8000442:	bf00      	nop
	"mov r1,#1\n\t"
	"b assert_failed\n\t"
	"str_usage: .asciz \"UsageFault\"\n\t"
	".align 2\n\t"
    );
}
 8000444:	08000436 	.word	0x08000436

08000448 <Default_Handler>:

__attribute__((naked)) void Default_Handler(void);
void Default_Handler(void)
{
	__asm volatile
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <str_dflt+0xa>)
 800044a:	f04f 0101 	mov.w	r1, #1
 800044e:	f7ff bebb 	b.w	80001c8 <assert_failed>

08000452 <str_dflt>:
 8000452:	6544      	.short	0x6544
 8000454:	6c756166 	.word	0x6c756166
 8000458:	0074      	.short	0x0074
 800045a:	bf00      	nop
	"mov r1,#1\n\t"
	"b assert_failed\n\t"
	"str_dflt: .asciz \"Default\"\n\t"
	".align 2\n\t"
    );
}
 800045c:	08000452 	.word	0x08000452

08000460 <Reset_Handler>:
{
 8000460:	b508      	push	{r3, lr}
    for (dst = &__data_start; dst < &__data_end__; ++dst, ++src) {
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <Reset_Handler+0x3c>)
    src = &__data_load;
 8000464:	490e      	ldr	r1, [pc, #56]	; (80004a0 <Reset_Handler+0x40>)
    for (dst = &__data_start; dst < &__data_end__; ++dst, ++src) {
 8000466:	e003      	b.n	8000470 <Reset_Handler+0x10>
        *dst = *src;
 8000468:	f851 2b04 	ldr.w	r2, [r1], #4
 800046c:	f843 2b04 	str.w	r2, [r3], #4
    for (dst = &__data_start; dst < &__data_end__; ++dst, ++src) {
 8000470:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <Reset_Handler+0x44>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d3f8      	bcc.n	8000468 <Reset_Handler+0x8>
    for (dst = &__bss_start__; dst < &__bss_end__; ++dst) {
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <Reset_Handler+0x48>)
 8000478:	e002      	b.n	8000480 <Reset_Handler+0x20>
        *dst = 0;
 800047a:	2200      	movs	r2, #0
 800047c:	f843 2b04 	str.w	r2, [r3], #4
    for (dst = &__bss_start__; dst < &__bss_end__; ++dst) {
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <Reset_Handler+0x4c>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d3f9      	bcc.n	800047a <Reset_Handler+0x1a>
    SystemInit();                       // CMSIS system initialization
 8000486:	f7ff ff45 	bl	8000314 <SystemInit>
    __libc_init_array();
 800048a:	f000 f88f 	bl	80005ac <__libc_init_array>
    (void)main();                       // application's entry point; should never return!
 800048e:	f7ff ff23 	bl	80002d8 <main>
    assert_failed("Reset_Handler", __LINE__);
 8000492:	21e8      	movs	r1, #232	; 0xe8
 8000494:	4806      	ldr	r0, [pc, #24]	; (80004b0 <Reset_Handler+0x50>)
 8000496:	f7ff fe97 	bl	80001c8 <assert_failed>
}
 800049a:	bd08      	pop	{r3, pc}
 800049c:	20000400 	.word	0x20000400
 80004a0:	08000624 	.word	0x08000624
 80004a4:	20000404 	.word	0x20000404
 80004a8:	20000404 	.word	0x20000404
 80004ac:	20000574 	.word	0x20000574
 80004b0:	080005f4 	.word	0x080005f4

080004b4 <osInit>:
OSThread * volatile OSNext; // next thread

void osInit(void)
{
    // set the PendSV priority to the lowest level
    *(uint32_t volatile *)0XE000ED20 |= (0XFF << 16);
 80004b4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80004b8:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 80004bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80004c0:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
}
 80004c4:	4770      	bx	lr
	...

080004c8 <osSched>:

void osSched(void)
{
    if(OSCurr != OSNext)
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <osSched+0x1c>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <osSched+0x20>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d005      	beq.n	80004e0 <osSched+0x18>
        *(uint32_t volatile *)0XE000ED04 = (1U << 28);
 80004d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	2000056c 	.word	0x2000056c
 80004e8:	20000570 	.word	0x20000570

080004ec <osThreadStart>:

void osThreadStart(OSThread *me, osThreadHandler thread_handler, void *stk_sto, uint32_t stk_size)
{
 80004ec:	b410      	push	{r4}
    // start the stack at the highest address and align it at the 8-byte boundary
    uint32_t *sp = (uint32_t *)((((uint32_t)stk_sto + stk_size) / 8) * 8);
 80004ee:	4413      	add	r3, r2
 80004f0:	f023 0307 	bic.w	r3, r3, #7
    uint32_t *stk_limit;

    *(--sp) = (1<<24); 					   //XPSR
 80004f4:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 80004f8:	f843 4c04 	str.w	r4, [r3, #-4]
	*(--sp) = (uint32_t)thread_handler;    //PC	
 80004fc:	f843 1c08 	str.w	r1, [r3, #-8]
	*(--sp) = 0X0000000EU;				   //LR	
 8000500:	210e      	movs	r1, #14
 8000502:	f843 1c0c 	str.w	r1, [r3, #-12]
	*(--sp) = 0X0000000CU;				   //R12	
 8000506:	210c      	movs	r1, #12
 8000508:	f843 1c10 	str.w	r1, [r3, #-16]
	*(--sp) = 0X00000003U;				   //R3	
 800050c:	2103      	movs	r1, #3
 800050e:	f843 1c14 	str.w	r1, [r3, #-20]
	*(--sp) = 0X00000002U;				   //R2	
 8000512:	2102      	movs	r1, #2
 8000514:	f843 1c18 	str.w	r1, [r3, #-24]
	*(--sp) = 0X00000001U;				   //R1	
 8000518:	2101      	movs	r1, #1
 800051a:	f843 1c1c 	str.w	r1, [r3, #-28]
	*(--sp) = 0X00000000U;				   //R0
 800051e:	2100      	movs	r1, #0
 8000520:	f843 1c20 	str.w	r1, [r3, #-32]
    // additional cpu registers that also need to be restored when switching context 	
    *(--sp) = 0X0000000BU;				   //R11	
 8000524:	210b      	movs	r1, #11
 8000526:	f843 1c24 	str.w	r1, [r3, #-36]
	*(--sp) = 0X0000000AU;				   //R10	
 800052a:	210a      	movs	r1, #10
 800052c:	f843 1c28 	str.w	r1, [r3, #-40]
	*(--sp) = 0X00000009U;				   //R9	
 8000530:	2109      	movs	r1, #9
 8000532:	f843 1c2c 	str.w	r1, [r3, #-44]
	*(--sp) = 0X00000008U;				   //R8	
 8000536:	2108      	movs	r1, #8
 8000538:	f843 1c30 	str.w	r1, [r3, #-48]
	*(--sp) = 0X00000007U;				   //R7	
 800053c:	2107      	movs	r1, #7
 800053e:	f843 1c34 	str.w	r1, [r3, #-52]
	*(--sp) = 0X00000006U;				   //R6	
 8000542:	2106      	movs	r1, #6
 8000544:	f843 1c38 	str.w	r1, [r3, #-56]
    *(--sp) = 0X00000005U;				   //R5	
 8000548:	2105      	movs	r1, #5
 800054a:	f843 1c3c 	str.w	r1, [r3, #-60]
	*(--sp) = 0X00000004U;				   //R4
 800054e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8000552:	2404      	movs	r4, #4
 8000554:	f843 4c40 	str.w	r4, [r3, #-64]

    // save the top of the stack at the thread's attribute
    me->sp = sp;
 8000558:	6001      	str	r1, [r0, #0]

    // round up the bottom of the stack to the 8-byte boundary
    stk_limit = (uint32_t *)(((((uint32_t)stk_sto - 1U) / 8) + 1U) * 8);
 800055a:	3a01      	subs	r2, #1
 800055c:	08d2      	lsrs	r2, r2, #3
 800055e:	3201      	adds	r2, #1
 8000560:	00d2      	lsls	r2, r2, #3

    // just a prefill to make it easy to see in memory
    for (sp = sp - 1U; sp >= stk_limit; --sp)
 8000562:	3b44      	subs	r3, #68	; 0x44
 8000564:	e002      	b.n	800056c <osThreadStart+0x80>
    {
        *sp = 0xDEADBEEFU;
 8000566:	4903      	ldr	r1, [pc, #12]	; (8000574 <osThreadStart+0x88>)
 8000568:	f843 1904 	str.w	r1, [r3], #-4
    for (sp = sp - 1U; sp >= stk_limit; --sp)
 800056c:	4293      	cmp	r3, r2
 800056e:	d2fa      	bcs.n	8000566 <osThreadStart+0x7a>
    }
}
 8000570:	bc10      	pop	{r4}
 8000572:	4770      	bx	lr
 8000574:	deadbeef 	.word	0xdeadbeef

08000578 <PendSV_Handler>:

__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile 
 8000578:	b672      	cpsid	i
 800057a:	490a      	ldr	r1, [pc, #40]	; (80005a4 <PendSV_restore+0x18>)
 800057c:	6809      	ldr	r1, [r1, #0]
 800057e:	b129      	cbz	r1, 800058c <PendSV_restore>
 8000580:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <PendSV_restore+0x18>)
 8000586:	6809      	ldr	r1, [r1, #0]
 8000588:	f8c1 d000 	str.w	sp, [r1]

0800058c <PendSV_restore>:
 800058c:	4906      	ldr	r1, [pc, #24]	; (80005a8 <PendSV_restore+0x1c>)
 800058e:	6809      	ldr	r1, [r1, #0]
 8000590:	f8d1 d000 	ldr.w	sp, [r1]
 8000594:	4904      	ldr	r1, [pc, #16]	; (80005a8 <PendSV_restore+0x1c>)
 8000596:	6809      	ldr	r1, [r1, #0]
 8000598:	4a02      	ldr	r2, [pc, #8]	; (80005a4 <PendSV_restore+0x18>)
 800059a:	6011      	str	r1, [r2, #0]
 800059c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005a0:	b662      	cpsie	i
 80005a2:	4770      	bx	lr
    "  CPSIE         I                 \n"

    /* return to the next thread */
    "  BX            lr                \n"
);
}
 80005a4:	2000056c 	.word	0x2000056c
 80005a8:	20000570 	.word	0x20000570

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4d0d      	ldr	r5, [pc, #52]	; (80005e4 <__libc_init_array+0x38>)
 80005b0:	4c0d      	ldr	r4, [pc, #52]	; (80005e8 <__libc_init_array+0x3c>)
 80005b2:	1b64      	subs	r4, r4, r5
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	2600      	movs	r6, #0
 80005b8:	42a6      	cmp	r6, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	4d0b      	ldr	r5, [pc, #44]	; (80005ec <__libc_init_array+0x40>)
 80005be:	4c0c      	ldr	r4, [pc, #48]	; (80005f0 <__libc_init_array+0x44>)
 80005c0:	f000 f820 	bl	8000604 <_init>
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	2600      	movs	r6, #0
 80005ca:	42a6      	cmp	r6, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d4:	4798      	blx	r3
 80005d6:	3601      	adds	r6, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f855 3b04 	ldr.w	r3, [r5], #4
 80005de:	4798      	blx	r3
 80005e0:	3601      	adds	r6, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	0800061c 	.word	0x0800061c
 80005e8:	0800061c 	.word	0x0800061c
 80005ec:	0800061c 	.word	0x0800061c
 80005f0:	08000620 	.word	0x08000620
 80005f4:	65736552 	.word	0x65736552
 80005f8:	61485f74 	.word	0x61485f74
 80005fc:	656c646e 	.word	0x656c646e
 8000600:	00000072 	.word	0x00000072

08000604 <_init>:
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000606:	bf00      	nop
 8000608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060a:	bc08      	pop	{r3}
 800060c:	469e      	mov	lr, r3
 800060e:	4770      	bx	lr

08000610 <_fini>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr
